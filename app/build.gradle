apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        applicationId "com.devindi.mapper.demo"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        flavorDimensions "mapper"

        productFlavors {

            manual {
                dimension "mapper"
            }

            beanUtils {
                dimension "mapper"
            }

            spring {
                dimension "mapper"
            }

            transmorph {
                dimension "mapper"
            }

            ezmorph {
                dimension "mapper"
            }

            morph {
                dimension "mapper"
            }

            dozer {
                dimension "mapper"
            }

            omapper {
                dimension "mapper"
            }

//            jmapper {
//                dimension "mapper"
//            }

            merger {
                dimension "mapper"
            }

            geda {
                dimension "mapper"
            }

            beanMapper {
                dimension "mapper"
            }

            mapStruct {
                dimension "mapper"
            }

            moo {
                dimension "mapper"
            }

//            smooks {
//                dimension "mapper"
//            }

            orika {
                dimension "mapper"
            }

            modelBridge {
                dimension "mapper"
            }

            nomin {
                dimension "mapper"
            }

            modelMapper {
                dimension "mapper"
            }
        }
    }
}

dependencies {

    beanUtilsCompile ('commons-beanutils:commons-beanutils:1.9.3') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }

    springCompile ('org.springframework:spring-core:4.3.12.RELEASE') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }

    transmorphCompile 'net.sf.transmorph:transmorph:3.1.3'

    ezmorphCompile ('org.kordamp.ezmorph:ezmorph:2.0.0') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'junit', module: 'junit'
    }

    morphCompile ('net.sf.morph:morph:1.1.1') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }

    beanMapperCompile files('libs/jbeanmapper-1.1.jar')
    beanMapperCompile ('commons-digester:commons-digester:1.5') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }

    dozerCompile 'net.sf.dozer:dozer:5.5.1'

//    jmapperCompile 'com.googlecode.jmapper-framework:jmapper-core:1.6.0'

    mergerCompile ('net.sf.brunneng.jom:java-object-merger:0.8.5.1') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }

    gedaCompile 'com.inspire-software.lib.dto.geda:geda.core:3.1.1'
    gedaCompile 'org.slf4j:slf4j-log4j12:1.7.25'

    mapStructCompile 'org.mapstruct:mapstruct-jdk8:1.2.0.Final'
    mapStructAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.2.0.Final'

    mooCompile 'com.codiform:moo-core:2.0'

//    smooksCompile 'org.milyn:milyn-smooks-all:1.7.0'

    orikaCompile 'ma.glasnost.orika:orika-core:1.5.2'

    nominCompile 'net.sf.nomin:nomin:1.1.3'

    modelMapperCompile 'org.modelmapper:modelmapper:1.1.2'

    testCompile 'junit:junit:4.12'
    testCompile 'commons-logging:commons-logging:1.2'

    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support:support-annotations:25.3.1'
}

project.gradle.taskGraph.whenReady {
    project.tasks.each {
        if (it.hasProperty("ignoreFailures")) {
            it.ignoreFailures = true
        }
    }
}

android.buildTypes.each {
    def performanceTestTask = project.tasks.create([name:"performance${it.name.capitalize()}", description:"Run mapper performance tests on each flavor with ${it.name} build type", group:'verification'])

}
